Judul Project   : Warehouse Management System (WMS)
Teknologi       : PostgreSQL + Node.js + Express + HTML/CSS/JS
Tempat Kerja    : GitHub Codespaces (tidak perlu install di laptop)

🎯 Tujuan Akhir
✅ Ada halaman login (admin / 123456)
✅ Setelah login → dashboard CRUD produk
✅ Update stok masuk/keluar
✅ Filter produk & export CSV
✅ Database PostgreSQL berisi produk, kategori, user

🧰 Prasyarat
| No | Item                     | Catatan                                  |
| -- | ------------------------ | ---------------------------------------- |
| 1  | Akun GitHub              | Buat di [github.com](https://github.com) |
| 2  | Browser Chrome / Firefox | Terbaru                                  |
| 3  | Koneksi internet         | Stabil                                   |

🗂️ Struktur Akhir Folder
wms-lengkap/
├── backend/
│   ├── index.js
│   ├── .env
│   ├── package.json
│   ├── middleware/
│   │   └── auth.js
│   └── routes/
│       ├── auth.js
│       ├── products.js
│       └── transactions.js
├── frontend/
│   ├── index.html
│   ├── login.html
│   ├── dashboard.html
│   ├── css/
│   │   ├── style.css
│   │   └── dashboard.css
│   └── js/
│       ├── auth.js
│       ├── products.js
│       └── utils.js
└── database/
    └── schema.sql

🔢 Langkah 1 - Persiapan Repository
| No  | Perintah / Tindakan                                                   |
| --- | --------------------------------------------------------------------- |
| 1.1 | Buat repo baru di GitHub namanya `wms-lengkap`                        |
| 1.2 | Klik tombol **“<> Code” → “Codespaces” → “Create codespace on main”** |
| 1.3 | Tunggu sampai terminal terbuka                                        |

🔢 Langkah 2 - Setup PostgreSQL
# 1. Jalankan PostgreSQL
sudo service postgresql start

# 2. Masuk ke psql
sudo -u postgres psql

# 3. Buat database
CREATE DATABASE wms_db;
\c wms_db

# 4. Aktifkan pgcrypto (untuk password hash)
CREATE EXTENSION IF NOT EXISTS pgcrypto;

# 5. Buat tabel
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password TEXT NOT NULL,
    role VARCHAR(20) DEFAULT 'user'
);

CREATE TABLE categories (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT
);

CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    sku VARCHAR(50) UNIQUE NOT NULL,
    name VARCHAR(255) NOT NULL,
    category_id INTEGER REFERENCES categories(id),
    quantity INTEGER DEFAULT 0,
    price DECIMAL(10,2),
    min_stock INTEGER DEFAULT 10,
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE transactions (
    id SERIAL PRIMARY KEY,
    product_id INTEGER REFERENCES products(id),
    type VARCHAR(10) CHECK (type IN ('IN', 'OUT')),
    quantity INTEGER NOT NULL,
    notes TEXT,
    user_id INTEGER REFERENCES users(id),
    created_at TIMESTAMP DEFAULT NOW()
);

# 6. Isi data awal
INSERT INTO categories (name, description) VALUES
('Elektronik', 'Produk elektronik'),
('Pakaian', 'Pakaian dan aksesoris'),
('Makanan', 'Makanan dan minuman');

INSERT INTO products (sku, name, category_id, quantity, price) VALUES
('ELC001', 'Laptop ASUS', 1, 50, 8000000),
('ELC002', 'Mouse Logitech', 1, 100, 150000),
('PKN001', 'Kaos Polo', 2, 200, 120000);

INSERT INTO users (username, password, role) VALUES
('super', crypt('123456', gen_salt('bf')), 'admin');

# 7. Keluar
\q

🔢 Langkah 3 - Backend Node.js
# 1. Masuk ke folder backend
mkdir backend && cd backend

# 2. Init & install paket
npm init -y
npm install express pg cors dotenv bcryptjs jsonwebtoken
npm install --save-dev nodemon

# 3. Buat file .env (isi lengkap)
touch .env

Isi .env:
---------
DB_HOST=localhost
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=postgres
DB_DATABASE=wms_db
PORT=3000
JWT_SECRET=wms_super_secret

4. Buat file index.js
---------------------
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');

const app = express();
const pool = new Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  user: process.env.DB_USER,
  password: String(process.env.DB_PASSWORD),
  database: process.env.DB_DATABASE,
});

app.use(cors({ origin: true }));
app.use(express.json());

// Routes
app.use('/api/auth', require('./routes/auth'));
app.use('/api/products', require('./routes/products'));
app.use('/api/transactions', require('./routes/transactions'));
app.use('/api/categories', require('./routes/categories'));

app.get('/', (req, res) => {
  res.json({ message: 'WMS API Running' });
});

app.listen(process.env.PORT, () => {
  console.log(`Server ready → http://localhost:${process.env.PORT}`);
});


🔢 Langkah 4 - Routes Backend
📁 routes/auth.js
-----------------
const express = require('express');
const { Pool } = require('pg');
const jwt = require('jsonwebtoken');
const router = express.Router();

const pool = new Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  user: process.env.DB_USER,
  password: String(process.env.DB_PASSWORD),
  database: process.env.DB_DATABASE,
});

router.post('/login', async (req, res) => {
  const { username, password } = req.body;
  const { rows } = await pool.query(
    'SELECT * FROM users WHERE username=$1 AND password=crypt($2, password)',
    [username, password]
  );
  if (rows.length === 0) return res.status(400).json({ error: 'Salah username atau password' });

  const token = jwt.sign({ id: rows[0].id, username: rows[0].username }, process.env.JWT_SECRET);
  res.json({ token, user: rows[0] });
});

module.exports = router;


📁 routes/products.js
---------------------
const express = require('express');
const { Pool } = require('pg');
const auth = require('../middleware/auth');
const router = express.Router();

const pool = new Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  user: process.env.DB_USER,
  password: String(process.env.DB_PASSWORD),
  database: process.env.DB_DATABASE,
});

// GET semua produk
router.get('/', async (req, res) => {
  const { rows } = await pool.query(`
    SELECT p.*, c.name AS category_name
    FROM products p
    LEFT JOIN categories c ON p.category_id = c.id
    ORDER BY p.id DESC
  `);
  res.json(rows);
});

// POST produk baru
router.post('/', auth, async (req, res) => {
  const { sku, name, category_id, quantity, price, min_stock } = req.body;
  const { rows } = await pool.query(
    'INSERT INTO products(sku,name,category_id,quantity,price,min_stock) VALUES($1,$2,$3,$4,$5,$6) RETURNING *',
    [sku, name, category_id, quantity, price, min_stock]
  );
  res.status(201).json(rows[0]);
});

// PUT update stok
router.put('/:id/stock', auth, async (req, res) => {
  const { quantity, type, notes } = req.body;
  const productId = req.params.id;
  await pool.query('BEGIN');
  const { rows } = await pool.query('SELECT * FROM products WHERE id=$1', [productId]);
  let newQty = rows[0].quantity + (type === 'IN' ? quantity : -quantity);
  await pool.query('UPDATE products SET quantity=$1 WHERE id=$2', [newQty, productId]);
  await pool.query(
    'INSERT INTO transactions(product_id,type,quantity,notes,user_id) VALUES($1,$2,$3,$4,$1)',
    [productId, type, quantity, notes]
  );
  await pool.query('COMMIT');
  res.json({ message: 'Stok diperbarui' });
});

module.exports = router;


📁 routes/categories.js
-----------------------
const express = require('express');
const { Pool } = require('pg');
const router = express.Router();

const pool = new Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  user: process.env.DB_USER,
  password: String(process.env.DB_PASSWORD),
  database: process.env.DB_DATABASE,
});

router.get('/', async (req, res) => {
  const { rows } = await pool.query('SELECT * FROM categories ORDER BY name');
  res.json(rows);
});

module.exports = router;


🔢 Langkah 5 - Frontend
📁 Buat folder & file
---------------------
cd .. # kembali ke root
mkdir -p frontend/{css,js}

📁 frontend/login.html
----------------------
<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8" />
  <title>WMS - Login</title>
  <link rel="stylesheet" href="css/style.css" />
</head>
<body>
  <div class="login-container">
    <h1>Warehouse Management System</h1>
    <form id="loginForm">
      <input id="username" placeholder="Username" required />
      <input id="password" type="password" placeholder="Password" required />
      <button type="submit">Login</button>
    </form>
    <p>Demo: super / 123456</p>
  </div>
  <script src="js/auth.js"></script>
</body>
</html>


📁 frontend/js/auth.js
----------------------
const API_URL = 'https://<GANTI-DENGAN-URL-MU>-3000.app.github.dev/api';

document.getElementById('loginForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const username = document.getElementById('username').value.trim();
  const password = document.getElementById('password').value.trim();
  if (!username || !password) return alert('Isi username & password');
  try {
    const res = await fetch(`${API_URL}/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username, password })
    });
    const data = await res.json();
    if (res.ok) {
      localStorage.setItem('token', data.token);
      window.location.href = 'dashboard.html';
    } else {
      alert(data.error || 'Login gagal');
    }
  } catch (err) {
    alert('Terjadi kesalahan saat login. Periksa koneksi.');
  }
});


🔢 Langkah 6 - Jalankan & Forward Port
--------------------------------------
| Bagian     | Perintah / Tindakan                                                 |
| ---------- | ------------------------------------------------------------------- |
| Backend    | `cd backend && npm run dev`                                         |
| Frontend   | `cd frontend && npx live-server --port=5500`                        |
| Forward    | Tab Ports → forward 3000 & 5500 → set **Public**                    |
| Update URL | Ganti di `auth.js` & `products.js` dengan URL port 3000 yang muncul |


🎯 Login Credential
Username: super
Password: 123456

🧪 Test Flow
Login
Tambah produk baru
Update stok
Filter & export CSV

🧹 Troubleshooting Cepat
| Masalah              | Solusi                                          |
| -------------------- | ----------------------------------------------- |
| "404 /auth/login"    | Backend belum jalan → `npm run dev`             |
| "CORS error"         | Pastikan backend pakai `cors({ origin: true })` |
| "password salah"     | Jalankan lagi SQL insert user                   |
| "Cannot find module" | `npm install` di backend                        |

