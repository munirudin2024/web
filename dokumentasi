🎉 Berhasil!
Sekarang semua komponen sudah terintegrasi:
-------------------------------------------

| Komponen                    | Status                                     |
| --------------------------- | -----------------------------------------  |
| PostgreSQL                  | ✅ aktif & menyimpan data                  |
| Backend Express (port 3000) | ✅ terhubung ke DB & publik via Codespaces |
| Frontend (Live Server)      | ✅ terhubung ke backend & menampilkan data |

📌 Ringkasan hasil
------------------
Input dari browser (halo postgresql dari codespace) →
Backend menerima POST →
PostgreSQL menyimpan →
Frontend menampilkan ulang →

id | name
---+-------------------------------
1  | Halo PostgreSQL
2  | Test dari curl
3  | halo postgresql dari codespace

🚀 Langkah lanjutan (opsional)
------------------------------
Deploy permanen
Backend → Railway / Render (biar tetap online saat Codespaces mati).
Frontend → Netlify (drag-and-drop folder frontend).
Tambah fitur
Hapus item (DELETE /api/items/:id).
Edit item (PUT /api/items/:id).
Validasi & loading spinner.
Selamat! Kamu sudah membuat full-stack web PostgreSQL dari NOL sampai bisa input & output data.

# ############################################################################################
📘 Dokumentasi Lengkap
----------------------
“Cara Membuat Web CRUD PostgreSQL dari NOL di GitHub Codespaces”
untuk Junior / Pemula

📌 Tujuan
---------
Setelah selesai mengikuti panduan ini, junior akan mampu:
1.Menyiapkan PostgreSQL di Codespaces.
2.Membuat API Node.js + Express + PostgreSQL.
3.Membuat halaman HTML/JS yang bisa input & menampilkan data.
4.Men-deploy frontend ke Netlify (opsional).

🧰 Prasyarat
------------
- Akun GitHub.
- Browser modern (Chrome / Firefox).
- Tidak perlu install apa pun di laptop (semua di Codespaces).

🗂️ Struktur Folder Akhir
------------------------
web-sederhana-pg/
├─ backend/
│  ├─ index.js
│  ├─ .env
│  ├─ package.json
│  └─ node_modules/
└─ frontend/
   ├─ index.html
   ├─ script.js
   └─ style.css

LANGKAH 1 – Persiapan Repository & Codespaces
---------------------------------------------
| Langkah | Perintah / Tindakan                                                   |
| ------- | --------------------------------------------------------------------- |
| 1.1     | Buat repo kosong di GitHub: `web-sederhana-pg`                        |
| 1.2     | Klik tombol **“<> Code” → “Codespaces” → “Create codespace on main”** |
| 1.3     | Terminal Codespaces terbuka → lanjut ke Langkah 2                     |

LANGKAH 2 – Setup PostgreSQL
----------------------------
| Langkah | Perintah                                                                  |
| ------- | ------------------------------------------------------------------------- |
| 2.1     | `sudo service postgresql start`                                           |
| 2.2     | `sudo -u postgres psql`                                                   |
| 2.3     | Di prompt `postgres=#` ketik:                                             |
|         | `CREATE DATABASE webdata;`                                                |
|         | `\c webdata`                                                              |
|         | `CREATE TABLE items (id SERIAL PRIMARY KEY, name VARCHAR(255) NOT NULL);` |
|         | `\q`                                                                      |

LANGKAH 3 – Backend Node.js
---------------------------
3.1 Inisialisasi & install
cd /workspaces/web-sederhana-pg
mkdir backend && cd backend
npm init -y
npm install express pg cors dotenv
npm install --save-dev nodemon

3.2 Script package.json
-----------------------
"scripts": {
  "dev": "nodemon index.js"
}

3.3 File .env
-------------
DB_HOST=localhost
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=<isi-password-postgres>
DB_DATABASE=webdata
PORT=3000

3.4 File index.js
-----------------
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');

const app = express();
const pool = new Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  user: process.env.DB_USER,
  password: String(process.env.DB_PASSWORD),
  database: process.env.DB_DATABASE,
});

app.use(cors({ origin: true }));
app.use(express.json());

// GET all items
app.get('/api/items', async (req, res) => {
  try {
    const { rows } = await pool.query('SELECT * FROM items ORDER BY id ASC');
    res.json(rows);
  } catch (err) {
    res.status(500).json({ error: 'Gagal ambil data' });
  }
});

// POST new item
app.post('/api/items', async (req, res) => {
  const name = (req.body.name || '').trim();
  if (!name) return res.status(400).json({ error: 'Nama harus diisi' });
  try {
    const { rows } = await pool.query(
      'INSERT INTO items (name) VALUES ($1) RETURNING *',
      [name]
    );
    res.status(201).json(rows[0]);
  } catch (err) {
    res.status(500).json({ error: 'Gagal simpan' });
  }
});

app.listen(process.env.PORT, () =>
  console.log(`Server ready → http://localhost:${process.env.PORT}/api/items`)
);

3.5 Jalankan
------------
npm run dev

LANGKAH 4 – Frontend
4.1 Buat folder & file
----------------------
cd /workspaces/web-sederhana-pg
mkdir frontend && cd frontend
touch index.html style.css script.js

4.2 Isi file
index.html
----------
<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8" />
  <title>Web Sederhana PostgreSQL</title>
  <link rel="stylesheet" href="style.css" />
</head>
<body>
  <div class="container">
    <h1>Catatan Sederhana</h1>
    <form id="itemForm">
      <input id="itemNameInput" placeholder="Masukkan nama item..." required />
      <button type="submit">Tambah Item</button>
    </form>
    <h2>Daftar Item</h2>
    <ul id="itemList"></ul>
  </div>
  <script src="script.js"></script>
</body>
</html>


style.css (opsional, bisa dipercantik sendiri)
----------------------------------------------
body{font-family:sans-serif;background:#f4f4f4;margin:0;padding:20px}
.container{max-width:500px;margin:auto;background:#fff;padding:30px;border-radius:8px;box-shadow:0 2px 10px rgba(0,0,0,.1)}
input,button{padding:10px;font-size:1rem}
input{flex:1;border:1px solid #ccc;border-radius:4px}
button{border:none;background:#007bff;color:#fff;border-radius:4px;cursor:pointer}
button:hover{background:#0056b3}
ul{list-style:none;padding:0}
li{background:#eee;margin:5px 0;padding:10px;border-radius:4px}

script.js
Ganti API_URL dengan URL publik Codespaces kamu.
-----------------------------------------------
const API_URL = 'https://<codespaces-name>-3000.app.github.dev/api/items';

console.log('Frontend JS loaded');
const form  = document.getElementById('itemForm');
const input = document.getElementById('itemNameInput');
const list  = document.getElementById('itemList');

form.addEventListener('submit', async (e) => {
  e.preventDefault();
  const name = input.value.trim();
  if (!name) return alert('Nama tidak boleh kosong');
  try {
    await fetch(API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ name })
    });
    input.value = '';
    fetchItems();
  } catch (err) {
    alert('Gagal menambahkan item');
  }
});

async function fetchItems() {
  try {
    const res = await fetch(API_URL);
    const data = await res.json();
    list.innerHTML = '';
    data.forEach(item => {
      const li = document.createElement('li');
      li.textContent = item.name;
      list.appendChild(li);
    });
  } catch {
    list.innerHTML = '<li>Gagal memuat data</li>';
  }
}
fetchItems();

LANGKAH 5 – Jalankan & Uji
--------------------------
| Bagian          | Langkah                                               |
| --------------- | ----------------------------------------------------- |
| Backend         | `npm run dev` (di folder backend)                     |
| Frontend        | `npx live-server --port=5500` (di folder frontend)    |
| Forward port    | Tab Ports → forward 3000 & 5500 → ubah ke Public      |
| Update API\_URL | Ganti di `script.js` dengan URL port 3000 yang muncul |
| Test            | Buka URL port 5500, tambah item, refresh browser      |


LANGKAH 6 – Deploy (Opsional)
-----------------------------
Frontend ke Netlify
Push repo ke GitHub.
Di Netlify: Import → publish directory frontend.
Backend ke Railway / Render
Buat Procfile: web: node index.js
Tambahkan variabel lingkungan di dashboard Railway → deploy.
Update API_URL di script.js dengan URL Railway.

Cheat Sheet Perintah Penting
----------------------------
| Tujuan                 | Perintah                        |
| ---------------------- | ------------------------------- |
| Start PostgreSQL       | `sudo service postgresql start` |
| Masuk psql             | `sudo -u postgres psql`         |
| Jalankan backend       | `npm run dev`                   |
| Jalankan frontend test | `npx live-server`               |
| Cek data               | `SELECT * FROM items;`          |
| Cek backend via curl   | `curl https://.../api/items`    |

Troubleshooting Cepat
---------------------
| Gejala                           | Solusi                                                                 |
| -------------------------------- | ---------------------------------------------------------------------- |
| “password authentication failed” | Password di `.env` salah → ganti dengan yang benar                     |
| “CORS blocked”                   | Tambah `cors({ origin: true })` di backend                             |
| “Cannot POST /api/items”         | Pastikan URL di `script.js` menggunakan HTTPS dan tanpa trailing slash |
| Data tidak muncul                | Hard-refresh browser (Ctrl+Shift+R) atau clear cache                   |
